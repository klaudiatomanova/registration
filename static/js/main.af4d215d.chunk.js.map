{"version":3,"sources":["components/Hooks/index.jsx","components/Registration/index.jsx","App.js","serviceWorker.js","index.js"],"names":["useSignUpForm","callback","useState","inputs","setInputs","handleSubmit","event","preventDefault","handleInputChange","persist","target","name","value","Registration","onSubmit","className","type","onChange","required","email","passwordOne","passwordTwo","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mRAyBeA,EAvBO,SAACC,GAAc,IAAD,EACNC,mBAAS,IADH,mBAC3BC,EAD2B,KACnBC,EADmB,KAgBlC,MAAO,CACLC,aAdmB,SAACC,GAChBA,GACFA,EAAMC,kBAaRC,kBAVwB,SAACF,GACzBA,EAAMG,UACNL,GAAU,SAACD,GAAD,mBAAC,eACNA,GADK,kBAEPG,EAAMI,OAAOC,KAAOL,EAAMI,OAAOE,YAOpCT,WCgCWU,G,MAjDM,WAAO,IAAD,EAC2Bb,IAA5CG,EADiB,EACjBA,OAAQK,EADS,EACTA,kBAAmBH,EADV,EACUA,aACnC,OACE,0BAAMS,SAAUT,GACd,yBAAKU,UAAU,aACb,yBAAKA,UAAU,cACb,uCACA,2BACEC,KAAK,OACLL,KAAK,OACLM,SAAUT,EACVI,MAAOT,EAAOQ,KACdO,UAAQ,KAGZ,yBAAKH,UAAU,cACb,wCACA,2BACEC,KAAK,QACLL,KAAK,QACLM,SAAUT,EACVI,MAAOT,EAAOgB,MACdD,UAAQ,KAGZ,yBAAKH,UAAU,cACb,2CACA,2BACEC,KAAK,WACLL,KAAK,cACLM,SAAUT,EACVI,MAAOT,EAAOiB,eAGlB,yBAAKL,UAAU,cACb,mDACA,2BACEC,KAAK,WACLL,KAAK,cACLM,SAAUT,EACVI,MAAOT,EAAOkB,eAGlB,4BAAQL,KAAK,UAAb,eCxCOM,MAJf,WACE,OAAO,kBAAC,EAAD,OCQWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.af4d215d.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nconst useSignUpForm = (callback) => {\n  const [inputs, setInputs] = useState({});\n\n  const handleSubmit = (event) => {\n    if (event) {\n      event.preventDefault();\n    }\n  };\n  const handleInputChange = (event) => {\n    event.persist();\n    setInputs((inputs) => ({\n      ...inputs,\n      [event.target.name]: event.target.value,\n    }));\n  };\n\n  return {\n    handleSubmit,\n    handleInputChange,\n    inputs,\n  };\n};\n\nexport default useSignUpForm;\n","import React from \"react\";\nimport useSignUpForm from \"../Hooks\";\nimport \"./Registration.css\";\n\nconst Registration = () => {\n  const { inputs, handleInputChange, handleSubmit } = useSignUpForm();\n  return (\n    <form onSubmit={handleSubmit}>\n      <div className=\"container\">\n        <div className=\"inputField\">\n          <label>Name</label>\n          <input\n            type=\"text\"\n            name=\"name\"\n            onChange={handleInputChange}\n            value={inputs.name}\n            required\n          />\n        </div>\n        <div className=\"inputField\">\n          <label>Email</label>\n          <input\n            type=\"email\"\n            name=\"email\"\n            onChange={handleInputChange}\n            value={inputs.email}\n            required\n          />\n        </div>\n        <div className=\"inputField\">\n          <label>Password</label>\n          <input\n            type=\"password\"\n            name=\"passwordOne\"\n            onChange={handleInputChange}\n            value={inputs.passwordOne}\n          />\n        </div>\n        <div className=\"inputField\">\n          <label>Confirm Password</label>\n          <input\n            type=\"password\"\n            name=\"passwordTwo\"\n            onChange={handleInputChange}\n            value={inputs.passwordTwo}\n          />\n        </div>\n        <button type=\"submit\">Sign Up</button>\n      </div>\n    </form>\n  );\n};\n\nexport default Registration;\n","import React from \"react\";\nimport Registration from \"./components/Registration\";\n\nfunction App() {\n  return <Registration />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}